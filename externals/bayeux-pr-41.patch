From 61b70d0dffec7b5a7cc0f42295d7a429dafeb9ef Mon Sep 17 00:00:00 2001
From: Ben Morgan <ben.morgan@warwick.ac.uk>
Date: Thu, 9 May 2019 11:52:15 +0100
Subject: [PATCH 1/2] Use fully qualified std namespace

Remove "using namespace" as tested data class clashes with C++
std::data since c++17.
---
 source/bxdatatools/testing/test_serialization_4.cxx | 18 ++++++++----------
 1 file changed, 8 insertions(+), 10 deletions(-)

diff --git a/source/bxdatatools/testing/test_serialization_4.cxx b/source/bxdatatools/testing/test_serialization_4.cxx
index 8404fb2..1d6190d 100644
--- a/source/bxdatatools/testing/test_serialization_4.cxx
+++ b/source/bxdatatools/testing/test_serialization_4.cxx
@@ -18,14 +18,12 @@
 #include <datatools/safe_serial.h>
 
 
-using namespace std;
-
 // A serializable class:
 class data : public datatools::i_serializable
 {
 public:
-  static const string SERIAL_TAG;
-  virtual const string & get_serial_tag () const;
+  static const std::string SERIAL_TAG;
+  virtual const std::string & get_serial_tag () const;
 
 public:
   int32_t value; // An integral value (32 bits)
@@ -45,9 +43,9 @@ void data::serialize (Archive & ar_,
   return;
 }
 
-const string data::SERIAL_TAG = "data";
+const std::string data::SERIAL_TAG = "data";
 
-const string & data::get_serial_tag () const
+const std::string & data::get_serial_tag () const
 {
   return data::SERIAL_TAG;
 }
@@ -58,7 +56,7 @@ const string & data::get_serial_tag () const
 
 int main (void)
 {
-  string filename = "test_serialization_4.xml";
+  std::string filename = "test_serialization_4.xml";
 
   {
     // Save 1000 data objects:
@@ -93,9 +91,9 @@ int main (void)
           }
         else
           {
-            string bad_tag = reader.get_record_tag ();
-            clog << "ERROR: Unknown serialization tag '"
-                 << bad_tag << "'! Cannot de-serialized more !" << endl;
+            std::string bad_tag = reader.get_record_tag ();
+            std::clog << "ERROR: Unknown serialization tag '"
+                 << bad_tag << "'! Cannot de-serialized more !" << std::endl;
             break;
           }
       }
-- 
1.8.3.1


From 3740ad63ff1d806466933682a040f22a3b70ad53 Mon Sep 17 00:00:00 2001
From: Ben Morgan <ben.morgan@warwick.ac.uk>
Date: Thu, 9 May 2019 11:53:47 +0100
Subject: [PATCH 2/2] Brio write/read test must execute in correct order

Dependencies allow reliable use of "ctest -j" to parallelize testing.
---
 source/CMakeLists.txt | 12 ++++++++++++
 1 file changed, 12 insertions(+)

diff --git a/source/CMakeLists.txt b/source/CMakeLists.txt
index bc2a622..9b8d050 100644
--- a/source/CMakeLists.txt
+++ b/source/CMakeLists.txt
@@ -399,6 +399,18 @@ if(BAYEUX_ENABLE_TESTING)
       set_property(TEST ${_testname}
         APPEND PROPERTY ENVIRONMENT ${${_m}_TEST_ENVIRONMENT}
         )
+
+      ### Require that brio-reader tests run after writer ones...
+      if(_testname MATCHES ".*brio_reader.*")
+        string(REPLACE "reader" "writer" _writer_dep ${_testname})
+        set_property(TEST ${_testname} PROPERTY DEPENDS ${_writer_dep})
+      endif()
+
+      if(_testname MATCHES "brio-test_reader*")
+        set_property(TEST ${_testname} PROPERTY DEPENDS "brio-test_writer;brio-test_writer_1;brio-test_writer_2")
+
+      endif()
+
     endforeach()
   endforeach()
 endif()
-- 
1.8.3.1

